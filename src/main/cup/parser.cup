package org.morsaprogramando.piton_language;

import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Scanner;

parser code {:
    private static Map<String, Integer> variables = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", column " + (s.right + 1));
            }
        }

        m.append(" : " + message);
        System.err.println(m);
    }
:}

terminal BOOLEAN;
terminal INTEGER;
terminal NAME;
terminal INPUT;
terminal EQUALS;
terminal TERM;
terminal LEFT_PAR;
terminal RIGHT_PAR;
terminal MULTIPLY;
terminal DIVIDE;
terminal PLUS;
terminal MINUS;
terminal LESS_THAN;
terminal LESS_THAN_EQ;
terminal GREATER_THAN;
terminal GREATER_THAN_EQ;
terminal NOTEQUAL;
terminal ISEQUAL;

/* No explicit EOF needed - CUP defines it automatically */
/* Non-terminal symbols */
non terminal expression;
non terminal var_assign;
non terminal read_input;
non terminal calculation;
non terminal predicate;

// precedence rules
precedence left PLUS, MINUS;
precedence left MULTIPLY, DIVIDE;
precedence left LEFT_PAR, RIGHT_PAR;

/* Grammar rules */
start with expression;

expression ::= var_assign TERM |
    read_input TERM |
    calculation:v {: System.out.println(v); :} |
    predicate:v {: System.out.println(v); :} |
    NAME:n {:
        String name = (String) n;
        if (!parser.variables.containsKey(name))
            System.out.println("Unkown variable: " + name);
        else
            System.out.println(parser.variables.get(name));
    :};

var_assign ::= NAME:n EQUALS calculation:i {:
    String name = (String) n;
    Integer value = (Integer) i;
    parser.variables.put(name, value);
 :};

read_input ::= NAME:n EQUALS INPUT {:
    String name = (String) n;
    parser.variables.put(name, parser.scanner.nextInt());
:};

calculation ::= LEFT_PAR calculation:c RIGHT_PAR
              {: RESULT = c; :};

calculation ::= calculation:a MULTIPLY calculation:b
              {: RESULT = (Integer) a * (Integer) b; :}
              | calculation:a DIVIDE calculation:b
              {: RESULT = (Integer) a / (Integer) b; :}
              | calculation:a PLUS calculation:b
              {: RESULT = (Integer) a + (Integer) b; :}
              | calculation:a MINUS calculation:b
              {: RESULT = (Integer) a - (Integer) b; :};

calculation ::= INTEGER:i
              {: RESULT = i; :};

predicate ::= LEFT_PAR predicate:c RIGHT_PAR
              {: RESULT = c; :};

predicate ::= calculation:a LESS_THAN calculation:b
              {: RESULT = (Integer) a < (Integer) b; :}
              | calculation:a LESS_THAN_EQ calculation:b
              {: RESULT = (Integer) a <= (Integer) b; :}
              | calculation:a GREATER_THAN calculation:b
              {: RESULT = (Integer) a > (Integer) b; :}
              | calculation:a GREATER_THAN_EQ calculation:b
              {: RESULT = (Integer) a >= (Integer) b; :}
              | calculation:a NOTEQUAL calculation:b
              {: RESULT = (Integer) a != (Integer) b; :}
              | calculation:a ISEQUAL calculation:b
              {: RESULT = (Integer) a == (Integer) b; :};

predicate ::= BOOLEAN:b
            {: RESULT = b; :};
