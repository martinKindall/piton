package org.morsaprogramando.piton_language;

import java_cup.runtime.*;
import java.util.Map;
import java.util.HashMap;
import java.util.Scanner;

parser code {:
    private static Map<String, Integer> variables = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

            if (s.left >= 0) {
                m.append(" in line " + (s.left + 1));
                if (s.right >= 0)
                    m.append(", column " + (s.right + 1));
            }
        }

        m.append(" : " + message);
        System.err.println(m);
    }
:}

terminal INTEGER;
terminal NAME;
terminal INPUT;
terminal EQUALS;
terminal TERM;
/* No explicit EOF needed - CUP defines it automatically */
/* Non-terminal symbols */
non terminal expression;
non terminal var_assign;
non terminal read_input;

/* Grammar rules */
start with expression;

expression ::= var_assign TERM |
    read_input TERM |
    NAME:n {:
        String name = (String) n;
        if (!parser.variables.containsKey(name))
            System.out.println("Unkown variable: " + name);
        else
            System.out.println(parser.variables.get(name));
    :};

var_assign ::= NAME:n EQUALS INTEGER:i {:
    String name = (String) n;
    Integer value = (Integer) i;
    parser.variables.put(name, value);
 :};

read_input ::= NAME:n EQUALS INPUT {:
    String name = (String) n;
    parser.variables.put(name, parser.scanner.nextInt());
:};
